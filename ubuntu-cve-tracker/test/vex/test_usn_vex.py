import json
import pytest
import requests
import random

from datalib import *
from data_generation import *

expected_output = {
    "metadata": {
        "@context": str,
        "@id": str,
        "author": str,
        "timestamp": str,
        "version": int
    },
    "statements": [
        {
            "vulnerability": {
                "@id": str,
                "name": str,
                "description": str,
                "aliases": list
            },
            "timestamp": str,
            "products": [
                {
                    "@id": str,
                }
            ],
            "status": str,
            "status_notes": str
        }
    ]
}

def generate_vex_documents():
    release_storage = ReleaseStorage()
    active_releases = release_storage.get_product_releases("ubuntu", True)
    active_releases += release_storage.esm_apps_releases
    active_releases += release_storage.esm_infra_releases

    cve_storage = UCTCVEStorage()
    cve_storage.link_release_storage(release_storage)
    cve_storage.load()

    package_storage = UCTPackageStorage()
    package_storage.link_release_storage(release_storage)
    package_storage.load(filter_releases=active_releases)

    usn_storage = USNStorage()

    cve_storage.link_pkg_storage(package_storage)

    usn_storage.link_pkg_storage(package_storage)
    usn_storage.link_cve_storage(cve_storage)
    usn_storage.link_release_storage(release_storage)
    usn_storage.load()

    usn_id = "6857-1"
    usn = usn_storage.get_usn(usn_id)
    vex = USN_VEXDocument(usn, "test_files", 1)
    output_dict_6857 = vex.generate_document(None)
    
    usn_id = "1-1"
    usn = usn_storage.get_usn(usn_id)
    vex = USN_VEXDocument(usn, "test_files", 1)
    output_dict_1 = vex.generate_document(None)
    
    sample_usns = []
    random_usn_ids = ['3677-2', '4787-1', '4883-1', '5365-1', '6604-1', '3234-1', '4184-1', '4871-1', '5003-1', '5821-4', '6857-1']
    for usn_id in random_usn_ids:
        usn = usn_storage.get_usn(usn_id)
        vex = USN_VEXDocument(usn, "test_files", 1)
        output_dict = vex.generate_document(None)

        sample_usns.append((output_dict, usn_id))

    return output_dict_6857, output_dict_1, sample_usns

def check_structure(expected, actual, path=""):
    """
    Check if all required fields in a USN VEX document are present and have the correct types
    """
    if isinstance(expected, dict):
        assert isinstance(actual, dict), f"Expected {path} to be a dict, but got {type(actual).__name__}"
        for key, value in expected.items():
            assert key in actual, f"Missing key: {path + key}"
            check_structure(value, actual[key], path + key + ".")
    elif isinstance(expected, list):
        assert isinstance(actual, list), f"Expected {path} to be a list, but got {type(actual).__name__}"
        if len(expected) > 0:
            for item in actual:
                check_structure(expected[0], item, path + "[]")
    else:
        assert isinstance(actual, expected), f"Expected {path} to be a {expected.__name__}, but got {type(actual).__name__}"

def check_all_fixed(output_dict):
    """
    Check that for a given USN, all the statements in the USN VEX file have a "fixed" status.
    It would be an error for a non-affected or affected package to show up in such a document, 
    given that we are only considering packages in the USN.
    """
    for statement in output_dict['statements']:
        assert statement['status'] == 'fixed', f"Statement status is not 'fixed' in USN VEX file: {statement}"


def check_exact_output(sample_usns):
    """
    Check that a specific USN produces the exact same output as the one stored locally, which is concidered the 
    source of truth.
    """
    for output_dict, usn_id in sample_usns:
        with open("test_files/USN-" + usn_id + ".json", 'r') as file:
            expected_output_dict = json.load(file)
        # timestamps of VEX file creation will always be different
        output_dict['metadata']['timestamp'] = ""
        expected_output_dict['metadata']['timestamp'] = ""
        assert output_dict['statements'] == expected_output_dict['statements'], f"The generated VEX file for USN {usn_id} does not match the expected output."

def check_usn_id_exists(sample_usns):
    """
    Check that a specific USN VEX file corresponds to a valid USN id in the Ubuntu endpoint.
    Note: failure of this test might mean that the Canonical servers are having issues.
    """
    for output_dict, _ in sample_usns:
        usn_id = output_dict['statements'][0]['vulnerability']['@id']
        response = requests.get(usn_id)
        assert response.status_code == 200, f"The USN link {usn_id} did not return a 200 status code. Either a typo was made in the VEX document or an error occured while accessing the Canonical servers"

def check_old_usn_is_empty(output_dict):
    """
    Check that an old USN, which doesn't have packages in any of the current releases, actually returns empty statements,
    thus making sure that we have correct output in the USN VEX document.
    """
    assert not output_dict, f"VEX document wrongfully created for an old USN: {output_dict}"


@pytest.fixture(scope="module")
def vex_documents():
    return generate_vex_documents()

def test_structure(vex_documents):
    output_dict_6857, _, _ = vex_documents
    check_structure(expected_output, output_dict_6857)

def test_all_fixed(vex_documents):
    output_dict_6857, _, _ = vex_documents
    check_all_fixed(output_dict_6857)

def test_exact_output(vex_documents):
    _, _, sample_usns = vex_documents
    check_exact_output(sample_usns)

def test_usn_id_exists(vex_documents):
    _, _, sample_usns = vex_documents
    check_usn_id_exists(sample_usns)

def test_old_usn_is_empty(vex_documents):
    _, output_dict_1, _ = vex_documents
    check_old_usn_is_empty(output_dict_1)

if __name__ == "__main__":
    pytest.main()

import unittest
import subprocess
import tempfile
import os
import shutil

class TestSubprojectEOLHandling(unittest.TestCase):

    def setUp(self):
        # Create a temporary directory to serve as the mock UCT environment
        self.test_dir = tempfile.mkdtemp()

        # Set up the required directory structure
        self.uct_dir = os.path.join(self.test_dir, 'uct')
        os.makedirs(os.path.join(self.uct_dir, 'active'))
        os.makedirs(os.path.join(self.uct_dir, 'subprojects', 'generic-subproject'))
        os.makedirs(os.path.join(self.uct_dir, 'meta_lists'))

        # Create a mock configuration file
        self.config_content = """
        subprojects:
          generic-subproject/jammy:
            data_formats:
              oval: false
            eol: true
            ppas:
            - ppa: test-team/jammy-ppa
              pocket: security
            product: generic-subproject
            release: jammy
            supported_packages: jammy-supported.txt
          generic-subproject/noble:
            data_formats:
              oval: false
            eol: false
            ppas:
            - ppa: test-team/noble-ppa
              pocket: security
            product: generic-subproject
            release: noble
            supported_packages: noble-supported.txt
        owners:
          server:
          - lpuser
        archs:
          - amd64
        type: Public
        cve_triage: true
        cve_patching: false
        cve_notification: true
        security_updates_notification: true
        binary_copies_only: false
        seg_support: false
        """
        with open(os.path.join(self.uct_dir, 'subprojects', 'generic-subproject', 'config.yml'), 'w') as f:
            f.write(self.config_content)
        with open(os.path.join(self.uct_dir, 'subprojects', 'generic-subproject', 'jammy-supported.txt'), 'w') as f:
            f.write("openssh")
        with open(os.path.join(self.uct_dir, 'subprojects', 'generic-subproject', 'noble-supported.txt'), 'w') as f:
            f.write("openssh")

        # Create the required package_info_overrides.json
        with open(os.path.join(self.uct_dir, 'meta_lists', 'package_info_overrides.json'), 'w') as f:
            f.write('{}')

    def tearDown(self):
        # Clean up the temporary directory
        shutil.rmtree(self.test_dir)

    def test_cve_creation_for_eol_handling(self):
        # Set the UCT environment variable to the temporary directory
        env = os.environ.copy()
        env['UCT'] = self.uct_dir

        # Run the script with the environment variable
        result = subprocess.run(['./scripts/active_edit', '-p', 'openssh', '-c', 'CVE-9999-9999', '-y'],
                                env=env, capture_output=True, text=True)

        self.assertEqual(result.returncode, 0, "Failed to create CVE via active_edit: %s" %
                         (result.stdout + "\n" + result.stderr))

        # Check if the CVE file was created
        cve_active_path = os.path.join(self.uct_dir, 'active', 'CVE-9999-9999')
        self.assertTrue(os.path.isfile(cve_active_path))

        # Check if the CVE file was created for subprojects
        cve_subproject_path = os.path.join(self.uct_dir, 'subprojects', 'generic-subproject', 'CVE-9999-9999')
        self.assertTrue(os.path.isfile(cve_subproject_path))

        # Check the content of the CVE file
        with open(cve_subproject_path, 'r') as f:
            content = f.read().strip().split('\n')

        expected_entries = {
            "generic-subproject/noble_openssh: needs-triage"
        }
        actual_entries = set(content)

        self.assertEqual(expected_entries, actual_entries)


if __name__ == '__main__':
    unittest.main()

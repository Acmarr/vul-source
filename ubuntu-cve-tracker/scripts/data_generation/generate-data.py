#!/usr/bin/env python3
# Main script to trigger data generation
#
# Author: Eduardo Barretto <eduardo.barretto@canonical.com>
# Copyright (C) 2024 Canonical, Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# TODO: improve arguments, perhaps nest arguments (e.g. osv cve)

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from datalib import ReleaseStorage, UCTCVEStorage, UCTPackageStorage, USNStorage
from data_generation.vex_lib import *
from data_generation.utils import *
from datetime import datetime

import logging
import os

log_name = "generate.data"


class LevelFilter(logging.Filter):
    def __init__(self, level):
        if level == "DEBUG":
            self.level = logging.DEBUG
        elif level == "INFO":
            self.level = logging.INFO
        elif level == "WARNING":
            self.level = logging.WARNING
        elif level == "ERROR":
            self.level = logging.ERROR
        elif level == "CRITICAL":
            self.level = logging.CRITICAL

    def filter(self, record):
        if record.levelno >= self.level:
            return True


def load_input_data():
    # release_storage = ReleaseStorage()
    release_storage = ReleaseStorage()
    active_releases = release_storage.get_product_releases("ubuntu", True)
    active_releases += release_storage.esm_apps_releases
    active_releases += release_storage.esm_infra_releases

    cve_storage = UCTCVEStorage()
    cve_storage.link_release_storage(release_storage)
    cve_storage.load()

    package_storage = UCTPackageStorage()
    package_storage.link_release_storage(release_storage)
    # package_storage.load()
    package_storage.load(filter_releases=active_releases)

    usn_storage = USNStorage()
    usn_storage.link_release_storage(release_storage)
    usn_storage.load()

    cve_storage.link_pkg_storage(package_storage)
    usn_storage.link_pkg_storage(package_storage)
    usn_storage.link_cve_storage(cve_storage)

    return cve_storage, package_storage, usn_storage, release_storage


def parse_options():
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        "-d",
        "--debug-level",
        default="debug",
        choices=["debug", "info", "warning", "error", "critical"],
        help="Define debug level",
    )
    parser.add_argument(
        "--type",
        required=True,
        default="all",
        choices=["json-pkg", "osv", "vex", "oval", "all"],
        help="Define what type of data to generate",
    )
    parser.add_argument(
        "--range",
        default="all",
        choices=["latest", "all"],
        help="Define what range of data should be generated, for the supported types (VEX and OSV)",
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        action="store",
        default=None,
        required=True,
        help="Directory to store generated files",
    )
    parser.add_argument(
        "-p",
        "--previous-dir",
        action="store",
        default=None,
        required=False,
        help="Directory where previous files are stored",
    )
    parser.add_argument(
        "--cves",
        nargs="+",
        default=None,
        help="Space separated list of CVE ids"
    )
    parser.add_argument(
        "--usns",
        nargs="+",
        default=None,
        help="Space separated list of USN ids"
    )
    parser.add_argument(
        "--releases",
        nargs="+",
        default=None,
        help="Space separated list of Ubuntu releases",
    )
    parser.add_argument(
        "--packages",
        nargs="+",
        default=None,
        help="Space separated list of source packages",
    )
    options = parser.parse_args()

    return options


def main():
    logger = logging.getLogger(log_name)
    logger.setLevel(logging.DEBUG)
    now = datetime.now()
    timenow = now.strftime("%d-%m-%Y-%H:%M:%S")
    file_handler = logging.FileHandler(f"/tmp/data-generation-{timenow}.log", mode="w")
    logger.addHandler(file_handler)

    options = parse_options()

    if options.debug_level:
        level_filter = LevelFilter(options.debug_level.upper())
        logger.addFilter(level_filter)
        logger.warning(f"Setting debug level to {options.debug_level.upper()}")

    if not os.path.exists(options.output_dir):
        logger.warning(f"Creating output dir {options.output_dir}")
        os.mkdir(options.output_dir, 0o644)
    elif not os.path.isdir(options.output_dir):
        logger.error(f"{options.output_dir} is not a directory, exiting!")


    cve_info, pkg_info, usn_info, release_info = load_input_data()

    if options.type == 'osv' or options.type == 'all':
        output_dir = os.path.join(options.output_dir, "osv")
        for usn in usn_info.sns:
            logger.debug(f"{usn}")
            usn2osv(output_dir, usn_info.get_usn(usn), log_name)

        for cve in cve_info.cves:
            logger.debug(f"{cve}")
            cve2osv(output_dir, cve_info.get_cve(cve), usn_info.get_usns_by_cve(cve), log_name)

    if options.type == 'vex':
        if options.previous_dir is not None:
            previous_dir_cves = os.path.join(options.previous_dir, "vex", "cve")
            previous_dir_usns = os.path.join(options.previous_dir, "vex", "usn")

        output_dir_cves = os.path.join(options.output_dir, "vex", "cve")
        output_dir_usns = os.path.join(options.output_dir, "vex", "usn")

        if options.range == 'all':
            for cve_id in reversed(cve_info.cves):
                # determine the current version of the document
                if options.previous_dir is None:
                    version = 1
                else:
                    version = get_vex_doc_version(os.path.join(previous_dir_cves, cve_id + ".json")) + 1
                # get the CVE and generate the relevant VEX data 
                cve = cve_info.get_cve(cve_id)
                logger.debug(f"Generating VEX data for {cve}")
                vex = CVE_VEXDocument(cve, output_dir_cves, version, log_name)
                output_file = cve.id + ".json"
                vex.generate_document(output_file)
            for usn_id in reversed(usn_info.sns):
                # determine the current version of the document
                if options.previous_dir is None:
                    version = 1
                else:
                    version = get_vex_doc_version(os.path.join(previous_dir_usns, "USN-" + usn_id + ".json")) + 1
                # get the USN and generate the relevant VEX data 
                usn = usn_info.get_usn(usn_id)
                logger.debug(f"Generating VEX data for USN-{usn_id}")
                vex = USN_VEXDocument(usn, output_dir_usns, version, log_name)
                output_file = "USN-" + usn.id + ".json"
                vex.generate_document(output_file)

        elif options.range == 'latest':
            # generate VEX data for the changed CVE files

            # get the commit for the commit cache and
            # find out the changed cves since that commit
            commit_hash = read_last_commit_hash("CVE")
            cves_changed = get_changed_cves(commit_hash)

            # generate the vex documents
            for cve_id in cves_changed:
                logger.debug(f"Generating VEX data for {cve_id}")
                # get the current version of the document and increase it by 1
                if options.previous_dir is None:
                    version = 1
                else:
                    version = get_vex_doc_version(os.path.join(previous_dir_cves, cve_id + ".json")) + 1

                cve_info.load_cve(cve_id)
                cve_object = cve_info.get_cve(cve_id)

                vex = CVE_VEXDocument(cve_object, output_dir_cves, version, log_name)
                output_file = cve_id + ".json"
                vex.generate_document(output_file)

            # update the commit cache with the current one, as vex data
            # was just generated
            write_current_commit_hash("CVE")

            # generate VEX data for the changed USN files

            # get the commit for the commit cache and
            # find out the changed cves since that commit
            commit_hash = read_last_commit_hash("USN")
            usns_changed = get_changed_usns(commit_hash)

            for usn_id in usns_changed:
                # get the current version of the document and increase it by 1
                logger.debug(f"Generating VEX data for USN-{usn_id}")
                if options.previous_dir is None:
                    version = 1
                else:
                    version = get_vex_doc_version(os.path.join(previous_dir_usns, "USN-" + usn_id + ".json")) + 1

                usn = usn_info.get_usn(usn_id)
                vex = USN_VEXDocument(usn, output_dir_usns, version, log_name)
                output_file = "USN-" + usn.id + ".json"
                vex.generate_document(output_file)
            # update the commit cache with the current one, as vex data
            # was just generated
            write_current_commit_hash("USN")


    return 0


if __name__ == "__main__":
    exit(main())

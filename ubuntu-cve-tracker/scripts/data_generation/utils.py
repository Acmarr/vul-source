#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Module containing util functions that are used to generate OpenVEX data for CVEs and USNs
#
# Author: Nick Galanis <nick.galanis@canonical.com>
# Copyright (C) 2024 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, "Version" 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#

import git
import json
import re


from datalib.config import USN_REPO
from .config import *

def get_changed_cves(commit_hash):
    """
    Function to grab changed CVEs by running a git diff in UCT
    from a cached commit until the current HEAD
    """
    try:
        repo = git.Repo(UCT)
        commit = repo.commit(commit_hash)
        
        diff = commit.diff('HEAD')
        # get only the changed CVE files
        changed_cves = []

        for cve in diff:
            if "CVE-" in cve.a_path:
                cve_id = re.search(r'CVE-\d{4}-\d{4,7}', cve.a_path).group(0)
                if not cve_id:
                    print("An error has occured while extracting the CVE ID")

                changed_cves.append(cve_id)

        return changed_cves
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

def get_changed_usns(commit_hash):
    try:
        repo = git.Repo(USN_REPO)
        commit = repo.commit(commit_hash)
        
        diff = commit.diff('HEAD')
        # get only the changed USN files
        changed_usns = []
        try:
            # usn files in the repo are named: usm/XXXX-Y, and we only want to keep the ID
            changed_usns = [re.search(r'usn/\d{1,6}-\d{1,2}', usn.a_path).group(0)[4:] for usn in diff if "usn/" in usn.a_path]
        except:
            print("An error has occured while extracting the CVE ID")
    
        return changed_usns
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

def read_last_commit_hash(vex_type):

    if vex_type == 'CVE':
        in_file = LAST_CVE_DATA_COMMIT
    elif vex_type == 'USN':
        in_file = LAST_USN_DATA_COMMIT

    try:
        with open(in_file, 'r') as file:
            commit_hash = file.read().strip()
    except FileNotFoundError as e:
        print("Commit cache file not found")

    return commit_hash

def write_current_commit_hash(vex_type):
    try:
        if vex_type == 'CVE':
            out_file = LAST_CVE_DATA_COMMIT
            repo = git.Repo(UCT)
        elif vex_type == 'USN':
            out_file = LAST_USN_DATA_COMMIT
            repo = git.Repo(USN_REPO)
        current_commit_hash = repo.head.commit.hexsha
        with open(out_file, 'w+') as file:
            file.write(current_commit_hash)

    except Exception as e:
        print(f"An error occurred while writing the commit hash file: {e}")

def get_vex_doc_version(vex_file):
    try:
        with open(vex_file, 'r') as file:
            data = json.load(file)
            version = data.get('metadata', {}).get('version')
            return int(version)
    # if the document is not present in the dir, we assume it has not
    # yet been generated for the first time, and thus currently has a version 0
    except FileNotFoundError:
        return 0
    except:
        print(f"Error in loading vex file:{vex_file}")

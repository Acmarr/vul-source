#!/usr/bin/env python3
# Author: Kees Cook <kees@ubuntu.com>
# Author: Marc Deslauriers <marc.deslauriers@ubuntu.com>
# Copyright (C) 2011,2012 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Will report which CVEs are pending to be fixed (or marked released) since
# a given version of a specific package.

import argparse
import cve_lib
import sys
import kernel_lib

parser = argparse.ArgumentParser(description="Report which CVEs are pending to be fixed (or marked released) since a given version of a specific package")
parser.add_argument("-r", "--release", help="Specify comma-separated list of which release to limit the search to (default is all)")
parser.add_argument("-d", "--debug", help="Report additional debugging while processing", action='store_true')
parser.add_argument("-s", "--states", help="Report CVE states with each CVE", action='store_true')
parser.add_argument("-D", "--descriptions", help="Report USN descriptions with each CVE (exit 1 when missing some)", action='store_true')
parser.add_argument("-a", "--add-cves", help="Add specific CVEs to the report (comma-separated)", action='store', metavar='CVE[,CVE...]', default="")
parser.add_argument("-n", "--no-warn", help="Don't warn about pending CVE version mismatch or state not pending with passed kernel version", dest='do_warn', action='store_false', default=True, )
parser.add_argument("-f", "--fixes", help="Report fixes associated with the package", action='store_true')
parser.add_argument("pkg", metavar="PACKAGE", help="Source package to query about")
parser.add_argument("prev_version", metavar="PREVIOUS_VERSION", help="Previous released version of PACKAGE")
parser.add_argument("curr_version", metavar="CURRENT_VERSION", help="Current or pending version of PACKAGE")
opt = parser.parse_args()

releases = None
if opt.release:
    releases = opt.release.split(',')

forced_cves = set()
if len(opt.add_cves) > 0:
    for cve in opt.add_cves.split(','):
        forced_cves.add(cve)

active, embargoed = cve_lib.get_cve_list()
cve_lib.build_subproject_dir_cache()
cves = cve_lib.load_all(active, embargoed)

pending_fixes = kernel_lib.get_kernel_pending_fixes(cves,
                                                    opt.pkg,
                                                    opt.prev_version,
                                                    opt.curr_version,
                                                    only_releases=releases,
                                                    forced_cves=forced_cves)
kernel_lib.print_pending_fixes(cves,
                               pending_fixes,
                               opt.curr_version,
                               states=opt.states,
                               descriptions=opt.descriptions,
                               warn=opt.do_warn,
                               fixes=opt.fixes,
                               forced_cves=forced_cves)

need_description = kernel_lib.cves_need_description(cves, [x[0] for x in pending_fixes])

rc = 0
if need_description:
    rc = 1

sys.exit(rc)

#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Module containing classes that represent CVE and Package data 
#
# Author: David Fernandez Gonzalez <david.fernandezgonzalez@canonical.com>
# Copyright (C) 2024 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
from datalib.uct_models import SourcePackage
from .models import *

class PackageStorage:
    """
    Storage class for handling packages.
    """
    packages: dict[str: SourcePackage]

    def __init__(self) -> None:
        self.packages = {}

    def _order_packages(self) -> None:
        self.packages = dict(sorted(self.packages.items()))

    def get_package(self, pkg_name: str) -> SourcePackage:
        if pkg_name not in self.packages: return None
        return self.packages[pkg_name] 

class CVEStorage:
    """
    Storage class for handling CVE packages.
    """
    cves: dict[str: CVE]
    package_storage: PackageStorage

    # TODO: add a changed cache so we can cache CVEs and only update when something got loaded

    def __init__(self) -> None:
        self.cves = {}

    def link_pkg_storage(self, package_storage: PackageStorage) -> None:
        self.package_storage = package_storage

    def _order_cves(self) -> None:
        self.cves = dict(sorted(self.cves.items(),
                                key=lambda value: int(value[0].split('-')[1]) * 10 ** 8 + int(value[0].split('-')[2])))

    def _init_cve(self, cve: CVE, pkg_data: dict) -> None:
        """Internal function to add CVE object to the class storage"""
        self.cves[cve.id] = (cve, pkg_data)

    def load_cve(self, cve_id: str) -> None:
        """Load a CVE into the storage"""
        raise NotImplementedError

    def get_cve(self, cve_id: str) -> CVE:
        """
        Get a CVE from the storage.
        The package links will be computed when the
        CVE is requested, extracting them from the internal
        PackageStorage.
        """
        raise NotImplementedError

class SNStorage:
    sns: dict[str: SN]
    package_storage: PackageStorage
    cve_storage: CVEStorage

    def __init__(self) -> None:
        self.sns = {}

    def _order_sns(self) -> None:
        self.sns = dict(sorted(self.sns.items(),
                               key=lambda value: int(value[0].split('-')[0]) * 10 ** 8 + int(value[0].split('-')[1])))

    def link_pkg_storage(self, package_storage: PackageStorage) -> None:
        self.package_storage = package_storage

    def link_cve_storage(self, cve_storage: CVEStorage) -> None:
        self.cve_storage = cve_storage

    def load_sn(self, object: SN) -> None:
        return NotImplementedError
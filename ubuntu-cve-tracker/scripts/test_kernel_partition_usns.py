#!/usr/bin/env pytest-3
# -*- coding: utf-8 -*-
#
# Author: Giampaolo Fresi Roglia <giampaolo.fresi.roglia@canonical.com>
# Copyright (C) 2024 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Simple tests for kernel_partition_usns.py

import pytest
import kernel_partition_usns
import textwrap
import unittest.mock as mock
import json
import os
import types

from io import StringIO

class TestCycleSearchTerms:
    def test_normal_cycle(self):
        expected = [f"kernel-sru-cycle-s2024.08.05-{x}" for x in range(1, 20)]
        assert expected == kernel_partition_usns.cycle_search_terms("s2024.08.05")

    def test_sub_cycle(self):
        expected = ["kernel-sru-cycle-s2024.08.05-2"]
        assert expected == kernel_partition_usns.cycle_search_terms("s2024.08.05-2")

    def test_wrong_format(self):
        with pytest.raises(Exception) as e_info:
            kernel_partition_usns.cycle_search_terms("anything except the right format would do")
        assert e_info.type == ValueError
        assert e_info.value.args[0] == "wrong format for cycle"

class TestPrintItemsPerLine:
    def test_defaultparams_oneline(self):
        items = ["CVE-2024-26677", "CVE-2024-38570", "CVE-2024-27012", "CVE-2024-39494"]
        expected = textwrap.dedent("""\
        CVE-2024-26677 CVE-2024-27012 CVE-2024-38570 CVE-2024-39494
        """)
        got = StringIO()
        kernel_partition_usns.print_items_per_line(items, out=got)
        assert got.getvalue() == expected

    def test_defaultparams_morelines(self):
        items = ["CVE-2024-42228", "CVE-2024-26677", "CVE-2024-38570", "CVE-2024-27012", "CVE-2024-39494"]
        expected = textwrap.dedent("""\
        CVE-2024-26677 CVE-2024-27012 CVE-2024-38570 CVE-2024-39494
        CVE-2024-42228
        """)
        got = StringIO()
        kernel_partition_usns.print_items_per_line(items, out=got)
        assert got.getvalue() == expected

    def test_prefix(self):
        items = ["CVE-2024-42228", "CVE-2024-26677", "CVE-2024-38570", "CVE-2024-27012", "CVE-2024-39494"]
        expected = textwrap.dedent("""\
        --->CVE-2024-26677 CVE-2024-27012 CVE-2024-38570 CVE-2024-39494
        --->CVE-2024-42228
        """)
        got = StringIO()
        kernel_partition_usns.print_items_per_line(items, prefix="--->", out=got)
        assert got.getvalue() == expected

    def test_noitems(self):
        items = None
        got = StringIO()
        with pytest.raises(Exception) as e_info:
            kernel_partition_usns.print_items_per_line(items, prefix="--->", out=got)
        assert e_info.type == ValueError
        assert e_info.value.args[0] == "items is None"

class TestNextUsn:
    def test_simple_case(self):
        next_usn = 10
        kernel_partition_usns.NEXT_USN = next_usn
        expected = "USN-0010-1"
        got = kernel_partition_usns.next_usn()
        assert got == expected
        assert kernel_partition_usns.NEXT_USN == next_usn + 1

@pytest.fixture(scope="session")
def task_searcher_out():
    fixture_dir = "scripts/testfiles/kernel_partition_usns/"
    fixture_file = os.path.join(fixture_dir, "task_searcher_output.json")
    with open(fixture_file, "rb") as f:
        tasks = json.load(f, object_hook=lambda d: types.SimpleNamespace(**d))
    return tasks

@pytest.fixture(scope="session")
def esm_releases():
    return ["trusty", "xenial", "bionic"]

class TestGetKernelTasks:
    def test_simple_case_verbose(self, task_searcher_out, esm_releases):
        res = kernel_partition_usns.get_kernel_tasks("s2024.08.05", esm_releases, True, lambda c: task_searcher_out)
        count = 0
        for family, kernels in res.items():
            count += len(kernels)
        assert count == 9

    def test_simple_case(self, task_searcher_out, esm_releases):
        res = kernel_partition_usns.get_kernel_tasks("s2024.08.05", esm_releases, False, lambda c: task_searcher_out)
        count = 0
        for family, kernels in res.items():
            count += len(kernels)
        assert count == 9

    def test_unimplemented_any_cycle_verbose(self, task_searcher_out, esm_releases):
        res = kernel_partition_usns.get_kernel_tasks("any", esm_releases, True, lambda c: task_searcher_out)
        assert res is None

    def test_unimplemented_any_cycle(self, task_searcher_out, esm_releases):
        res = kernel_partition_usns.get_kernel_tasks("any", esm_releases, False, lambda c: task_searcher_out)
        assert res is None

def mock_get_active_releases_with_esm():
    return ["trusty", "xenial", "bionic", "focal", "jammy", "noble"]

def mock_is_active_esm_release(release):
    if release in ["trusty", "xenial", "bionic"]:
        return True

class TestGetEsmReleases:
    @mock.patch("cve_lib.get_active_releases_with_esm", mock_get_active_releases_with_esm)
    @mock.patch("cve_lib.is_active_esm_release", mock_is_active_esm_release)
    def test_get_esm_releases(self):
        got = sorted(kernel_partition_usns.get_esm_releases())
        expected = sorted(["trusty", "xenial", "bionic"])
        assert got == expected

class mock_USNDb(object):
    def get_latest_usn_version(self, kernel, release):
        res = {"noble": {"linux": "6.8.0-44.44",
                         "linux-azure": "6.8.0-1014.16",
                         "linux-ibm": "6.8.0-1012.12",
                         "linux-gke": "6.8.0-1011.14"},
               "jammy": {"linux-gcp-6.8": "6.8.0-1014.16~22.04.1",
                         "linux": "5.15.0-121.131"},
               "xenial": {"linux": "4.4.0-259.292"}}
        try:
            return res[release][kernel]
        except KeyError:
            return None

class mock_uctlp(object):
    def get_earliest_version(self, release, kernel):
        return "0~"

def mock_get_kernel_pending_fixes(cves, kernel, latest_version, current_version, release):
    table = {
        "noble": {
            "linux": ["CVE-2021-0001", "CVE-2022-0001", "CVE-2023-0001"],
            "linux-azure": ["CVE-2021-0001", "CVE-2022-0001", "CVE-2023-0001", "CVE-2024-0001"],
            "linux-ibm": ["CVE-2021-0001", "CVE-2022-0001"]
        },
        "jammy": {
            "linux": ["CVE-2021-0001", "CVE-2022-0001", "CVE-2023-0001"],
            "linux-gcp-6.8": ["CVE-2021-0001", "CVE-2022-0001", "CVE-2023-0001"]
        },
        "esm-infra/xenial": {
            "linux": ["CVE-2024-0001", "CVE-2023-0001", "CVE-2022-0001", "CVE-2021-0001"]
        }
    }
    res = set()
    try:
        for cve in table[release[0]][kernel]:
            res.add((cve, kernel, release[0], "", ""))
    except KeyError:
        return []
    return sorted(res, key=lambda x: x[0])

class TestPartitionKernels:
    @mock.patch("kernel_lib.get_kernel_pending_fixes", mock_get_kernel_pending_fixes)
    def test_verbose_case(self, task_searcher_out, esm_releases):
        expected = textwrap.dedent("""\
        ========== s2024.08.05 cycle ==========
        ========== kernel family 6.8.0  ==========
        noble linux: 6.8.0-45.45 (prev: 6.8.0-44.44)
        noble linux-azure: 6.8.0-1015.17 (prev: 6.8.0-1014.16)
        noble linux-ibm: 6.8.0-1013.13 (prev: 6.8.0-1012.12)
        jammy linux-gcp-6.8: 6.8.0-1015.17~22.04.1 (prev: 6.8.0-1014.16~22.04.1)
        ========== kernel family 5.15.0  ==========
        jammy linux: 5.15.0-122.132 (prev: 5.15.0-121.131)
        ========== kernel family 4.4.0  ==========
        xenial linux: 4.4.0-259.293 (prev: 4.4.0-259.292)
        """)
        got = StringIO()
        kernel_families = kernel_partition_usns.get_kernel_tasks("s2024.08.05", esm_releases, False, lambda c: task_searcher_out)
        allusns, without_cves = kernel_partition_usns.partition_kernels("s2024.08.05",
                                                                        mock_USNDb(),
                                                                        mock_uctlp(), [],
                                                                        kernel_families, True,
                                                                        out=got)

        assert got.getvalue() == expected

    @mock.patch("kernel_lib.get_kernel_pending_fixes", mock_get_kernel_pending_fixes)
    def test_simple_case(self, task_searcher_out, esm_releases):
        expected = ""
        got = StringIO()
        kernel_families = kernel_partition_usns.get_kernel_tasks("s2024.08.05", esm_releases, False, lambda c: task_searcher_out)
        allusns, without_cves = kernel_partition_usns.partition_kernels("s2024.08.05",
                                                                        mock_USNDb(),
                                                                        mock_uctlp(), [],
                                                                        kernel_families, False,
                                                                        out=got)

        assert got.getvalue() == expected

class TestPrintCycleInfo:
    @mock.patch("kernel_lib.get_kernel_pending_fixes", mock_get_kernel_pending_fixes)
    def test_quiet(self, task_searcher_out, esm_releases):
        expected = textwrap.dedent("""\
        kernel family: 6.8.0
           USN-0001-1
              noble/linux: 6.8.0-45.45
              jammy/linux-gcp-6.8: 6.8.0-1015.17~22.04.1
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001
           USN-0002-1
              noble/linux-azure: 6.8.0-1015.17
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001 CVE-2024-0001
           additional cves:
              CVE-2024-0001
           USN-0003-1
              noble/linux-ibm: 6.8.0-1013.13
           CVEs:
              CVE-2021-0001 CVE-2022-0001
           missing cves:
              CVE-2023-0001
        kernel family: 5.15.0
           USN-0004-1
              jammy/linux: 5.15.0-122.132
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001
        kernel family: 4.4.0
           USN-0005-1
              xenial/linux: 4.4.0-259.293
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001 CVE-2024-0001
        """)
        kernel_partition_usns.NEXT_USN = 1
        got = StringIO()
        kernel_families = kernel_partition_usns.get_kernel_tasks("s2024.08.05", esm_releases, False, lambda c: task_searcher_out)
        allusns, without_cves = kernel_partition_usns.partition_kernels("s2024.08.05",
                                                                        mock_USNDb(),
                                                                        mock_uctlp(), [],
                                                                        kernel_families, False)

        kernel_partition_usns.print_cycle_info(allusns, without_cves, False, out=got)
        assert got.getvalue() == expected

    @mock.patch("kernel_lib.get_kernel_pending_fixes", mock_get_kernel_pending_fixes)
    def test_untracked(self, task_searcher_out, esm_releases):
        expected = textwrap.dedent("""\
        kernel family: 6.8.0
           USN-0001-1
              noble/linux: 6.8.0-45.45
              jammy/linux-gcp-6.8: 6.8.0-1015.17~22.04.1
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001
           USN-0002-1
              noble/linux-azure: 6.8.0-1015.17
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001 CVE-2024-0001
           additional cves:
              CVE-2024-0001
           USN-0003-1
              noble/linux-ibm: 6.8.0-1013.13
           CVEs:
              CVE-2021-0001 CVE-2022-0001
           missing cves:
              CVE-2023-0001
        kernel family: 5.15.0
           USN-0004-1
              jammy/linux: 5.15.0-122.132
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001
        kernel family: 4.4.0
           USN-0005-1
              xenial/linux: 4.4.0-259.293
           CVEs:
              CVE-2021-0001 CVE-2022-0001 CVE-2023-0001 CVE-2024-0001
        without cves (untracked kernels or already published kernel versions):
           noble/linux-intel: 6.8.0-1012.19
        """)
        kernel_partition_usns.NEXT_USN = 1
        got = StringIO()
        kernel_families = kernel_partition_usns.get_kernel_tasks("s2024.08.05", esm_releases, False, lambda c: task_searcher_out)
        allusns, without_cves = kernel_partition_usns.partition_kernels("s2024.08.05",
                                                                        mock_USNDb(),
                                                                        mock_uctlp(), [],
                                                                        kernel_families, False)

        kernel_partition_usns.print_cycle_info(allusns, without_cves, True, out=got)
        assert got.getvalue() == expected

class TestSignoffBug:
    def test_order(self, task_searcher_out):
        expected = textwrap.dedent("""\
        noble/linux: 6.8.0-45.45
        noble/linux-azure: 6.8.0-1015.17
        noble/linux-gke: 6.8.0-1011.14
        noble/linux-ibm: 6.8.0-1013.13
        noble/linux-ibm-gt: 6.8.0-1012.13
        noble/linux-intel: 6.8.0-1012.19
        jammy/linux-gcp-6.8: 6.8.0-1015.17~22.04.1
        jammy/linux: 5.15.0-122.132
        focal/linux-riscv-5.15: 5.15.0-1066.70~20.04.1
        xenial/linux: 4.4.0-259.293
        xenial/linux-aws: 4.4.0-259.293
        xenial/linux-intel: 4.4.0-259.293
        """)
        bugs = []
        for task in task_searcher_out:
            try:
                bug = kernel_partition_usns.SignoffBug(task)
            except Exception:
                continue
            bugs.append(bug)
        got = StringIO()
        for bug in sorted(bugs):
            print(bug, file=got)
        got = StringIO()
        for bug in sorted(bugs):
            print(bug, file=got)
        assert got.getvalue() == expected

#!/usr/bin/env pytest-3
# -*- coding: utf-8 -*-
#
# Author: Marc Deslauriers <marc.deslauriers@canonical.com>
# Copyright (C) 2024 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Simple tests for convert-pickle.py
#
# The test pickle files contain USN-6686-1. This USN was selected randomly
# because it was big and contained unicode characters.

import pytest
import subprocess
import pickle
import json
import tempfile
import os
import unittest
import shutil


class TestConvertPickle(unittest.TestCase):
    '''This tests the convert-pickle.py utility.'''

    def setUp(self):
        """Set up prior to each test_* function"""
        self.tmpdir = tempfile.mkdtemp(prefix='test_convert_pickle-')

    def tearDown(self):
        """Clean up after each test_* function"""
        if os.path.exists(self.tmpdir):
            shutil.rmtree(self.tmpdir)

    def _load_pickle(self, filename):
        '''loads a pickle file'''
        with open(filename, 'rb') as f:
            db = pickle.load(f, encoding='utf-8')
        return db

    def _load_json(self, filename):
        '''loads a json file'''
        with open(filename, 'rb') as f:
            db = json.load(f)
        return db

    def _load_text(self, filename):
        '''loads a file as text'''
        with open(filename, 'rb') as f:
            text = f.read()
        return text

    def test_convert_pickle_v2(self):
        '''test converting pickle v2 file to json'''
        pickle_file = 'scripts/testfiles/database-protv2.pickle'
        json_file = os.path.join(self.tmpdir, 'test.json')

        rc = subprocess.call(["scripts/convert-pickle.py",
                              "-i", pickle_file,
                              "-o", json_file])
        self.assertEqual(rc, 0)

        pickle_db = self._load_pickle(pickle_file)
        json_db = self._load_json(json_file)
        json_text = self._load_text(json_file)

        # Make sure the databases are the same
        self.assertEqual(pickle_db, json_db)

        # Make sure unicode is escaped in json file
        self.assertTrue('黄' in json_db['6686-1']['description'])
        self.assertFalse('黄' in json_text.decode('utf-8'))
        self.assertTrue(b'\\u9ec4' in json_text)

        # Make sure the id has no prefix
        self.assertEqual(json_db['6686-1']['id'], '6686-1')

    def test_convert_pickle_prefix(self):
        '''test converting pickle file to json with prefix'''
        pickle_file = 'scripts/testfiles/database-protv2.pickle'
        json_file = os.path.join(self.tmpdir, 'test.json')

        rc = subprocess.call(["scripts/convert-pickle.py",
                              "-i", pickle_file,
                              "-o", json_file,
                              "-p", "TEST-"])
        self.assertEqual(rc, 0)

        json_db = self._load_json(json_file)

        self.assertEqual(json_db['6686-1']['id'], 'TEST-6686-1')

    def test_convert_pickle_v3(self):
        '''test converting pickle v3 file to json'''
        pickle_file = 'scripts/testfiles/database-protv3.pickle'
        json_file = os.path.join(self.tmpdir, 'test.json')

        rc = subprocess.call(["scripts/convert-pickle.py",
                              "-i", pickle_file,
                              "-o", json_file])
        self.assertEqual(rc, 0)

        pickle_db = self._load_pickle(pickle_file)
        json_db = self._load_json(json_file)
        json_text = self._load_text(json_file)

        # Make sure the databases are the same
        self.assertEqual(pickle_db, json_db)

        # Make sure unicode is escaped in json file
        self.assertTrue('黄' in json_db['6686-1']['description'])
        self.assertFalse('黄' in json_text.decode('utf-8'))
        self.assertTrue(b'\\u9ec4' in json_text)

        # Make sure the id has no prefix
        self.assertEqual(json_db['6686-1']['id'], '6686-1')


#!/usr/bin/env python3
# Main script to trigger data generation
#
# Author: Eduardo Barretto <eduardo.barretto@canonical.com>
# Copyright (C) 2024 Canonical, Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 3 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# TODO: improve arguments, perhaps nest arguments (e.g. osv cve)

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from datalib import ReleaseStorage, UCTCVEStorage, UCTPackageStorage, USNStorage, cve2osv, usn2osv
from datetime import datetime

import logging
import os

log_name = "generate.data"


class LevelFilter(logging.Filter):
    def __init__(self, level):
        if level == "DEBUG":
            self.level = logging.DEBUG
        elif level == "INFO":
            self.level = logging.INFO
        elif level == "WARNING":
            self.level = logging.WARNING
        elif level == "ERROR":
            self.level = logging.ERROR
        elif level == "CRITICAL":
            self.level = logging.CRITICAL

    def filter(self, record):
        if record.levelno >= self.level:
            return True


def load_input_data():
    release_storage = ReleaseStorage()
    cve_storage = UCTCVEStorage()
    cve_storage.link_release_storage(release_storage)
    cve_storage.load()

    package_storage = UCTPackageStorage()
    package_storage.link_release_storage(release_storage)
    package_storage.load()

    usn_storage = USNStorage()
    usn_storage.link_release_storage(release_storage)
    usn_storage.load()

    cve_storage.link_pkg_storage(package_storage)
    usn_storage.link_pkg_storage(package_storage)
    usn_storage.link_cve_storage(cve_storage)

    return cve_storage, package_storage, usn_storage, release_storage


def parse_options():
    parser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)

    parser.add_argument(
        "-d",
        "--debug-level",
        default="warning",
        choices=["debug", "info", "warning", "error", "critical"],
        help="Define debug level",
    )
    parser.add_argument(
        "--type",
        required=True,
        default="all",
        choices=["json-pkg", "osv", "vex", "oval", "all"],
        help="Define what type of data to generate",
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        action="store",
        default=None,
        required=True,
        help="Directory to store generated OSV files",
    )
    parser.add_argument(
        "--cves",
        nargs="+",
        default=None,
        help="Space separated list of CVE ids"
    )
    parser.add_argument(
        "--usns",
        nargs="+",
        default=None,
        help="Space separated list of USN ids"
    )
    parser.add_argument(
        "--releases",
        nargs="+",
        default=None,
        help="Space separated list of Ubuntu releases",
    )
    parser.add_argument(
        "--packages",
        nargs="+",
        default=None,
        help="Space separated list of source packages",
    )
    options = parser.parse_args()

    return options


def main():
    logger = logging.getLogger(log_name)
    logger.setLevel(logging.DEBUG)
    now = datetime.now()
    timenow = now.strftime("%d-%m-%Y-%H:%M:%S")
    file_handler = logging.FileHandler(f"/tmp/data-generation-{timenow}.log", mode="w")
    logger.addHandler(file_handler)

    options = parse_options()

    if options.debug_level:
        level_filter = LevelFilter(options.debug_level.upper())
        logger.addFilter(level_filter)
        logger.warning(f"Setting debug level to {options.debug_level.upper()}")

    if not os.path.exists(options.output_dir):
        logger.warning(f"Creating output dir {options.output_dir}")
        os.mkdir(options.output_dir, 0o644)
    elif not os.path.isdir(options.output_dir):
        logger.error(f"{options.output_dir} is not a directory, exiting!")


    cve_info, pkg_info, usn_info, release_info = load_input_data()

    if options.type == 'osv':
        for usn in usn_info.sns:
            logger.debug(f"{usn}")
            usn2osv(options.output_dir, usn_info.get_usn(usn), log_name)

        for cve in cve_info.cves:
            logger.debug(f"{cve}")
            cve2osv(options.output_dir, cve_info.get_cve(cve), usn_info.get_usns_by_cve(cve), log_name)

    return 0


if __name__ == "__main__":
    exit(main())

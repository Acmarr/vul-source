#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Generate CVE OVAL from CVE metadata files
#
# Author: David Ries <ries@jovalcm.com>
# Author: Joy Latten <joy.latten@canonical.com>
# Author: Steve Beattie <steve.beattie@canonical.com>
# Copyright (C) 2015 Farnam Hall Ventures LLC
# Copyright (C) 2019 Canonical Ltd.
#
# This script is distributed under the terms and conditions of the GNU General
# Public License, Version 2 or later. See http://www.gnu.org/copyleft/gpl.html
# for details.
#
# Example usage:
# $ sudo apt-get install libopenscap8
# $ oscap info ./com.ubuntu.trusty.cve.oval.xml
# $ oscap oval generate report ./com.ubuntu.trusty.cve.oval.xml
#
# Requires 5.11.1 in /usr/share/openscap/schemas/oval/ but also openscap to
# support dpkg version comparisons. These will hopefully be part of openscap
# 1.3
# $ oscap oval eval --report /tmp/oval-report.html \
#     ./com.ubuntu.trusty.cve.oval.xml

from __future__ import print_function, unicode_literals

import argparse
import glob
import json
import os
import re
import sys

from cve_lib import (product_series, PRODUCT_UBUNTU, all_releases, eol_releases, devel_release, release_parent, release_name, needs_oval)
import oval_lib

debug_level = 0

def main():
    """ parse command line options and iterate through files to be processed
    """
    global debug_level
    global supported_releases

    # parse command line options
    parser = argparse.ArgumentParser(description='Generate OVAL for CVE, PKG or USNs.')
    parser.add_argument('--type', required=True, choices=['cve', 'pkg', 'usn', 'json-pkg'],
                        help='OVAL format')
    parser.add_argument('--cves', nargs='*', default=['active/CVE-*', 'retired/CVE-*'],
                        help='pathname patterns (globs) specifying CVE '
                        'metadata files to be converted into OVAL '
                        '(default: "./active/CVE-*" "./retired/CVE-*")')
    parser.add_argument('--oci', action='store_true',
                        help='Also generate OVAL files for scanning Official Cloud Image manifests')
    parser.add_argument('--output-dir', nargs='?', default='./',
                        help='output directory for reports (default is ./)')
    parser.add_argument('--oci-output-dir', nargs='?',
                        help='output directory for OCI manifest OVAL files (default is to use the same directory as --output-dir)')
    parser.add_argument('--oci-prefix', nargs='?', default='oci.',
                        help='Prefix to use for OCI manifest OVAL files names (required if oci-output-dir is the same as output-dir)')
    parser.add_argument('--no-progress', action='store_true',
                        help='do not show progress meter')
    parser.add_argument('--pkg-cache-dir', action='store', default='./',
                        help='cache location for binary packages')
    parser.add_argument('-d', '--debug', action='count', default=0,
                        help="report debugging information")
    parser.add_argument('--usn-db-dir', default='./', type=str,
                        help='location of USN database.json to process '
                        '(default is ./)')
    parser.add_argument('--usn-number', default=None, type=str,
                        help='if passed specifics a USN for the oval_usn generator')
    parser.add_argument('--oval-releases', default=None, nargs='+',
                        help='only generate OVAL for specific releases')
    parser.add_argument('--packages', nargs='+', action='store', default=None,
                        help='generates OVAL for specific packages')
    parser.add_argument('--fixed-only', action='store_true',
                        help='only generate OVAL for fixed CVEs')
    parser.add_argument('--expand', action='store_true', default=False,
                        help='avoids combining all the OVAL data into one '
                        'file and expands the output OVAL files into different '
                        'releases, such as esm-apps, esm-infra, and ubuntu')

    args = parser.parse_args()
    debug_level = args.debug

    if args.output_dir and not os.path.isdir(args.output_dir):
        raise FileNotFoundError("Could not find '%s'" % args.output_dir)

    if args.oci_prefix:
        if not args.oci_output_dir:
            args.oci_output_dir = args.output_dir
        elif args.output_dir == args.oci_output_dir and len(args.oci_prefix) < 1:
            raise ValueError("oci-prefix must be set when output-dir and oci-output-dir are the same")

    releases = []
    if args.oval_releases:
        releases = args.oval_releases
        for release in releases:
            if not needs_oval(release):
                error(f"unknown oval release {release}")
    else:
        releases = []
        for r in set(all_releases).difference(set(eol_releases)).difference(set([devel_release])):
            if needs_oval(r):
                releases.append(r)

    out_releases = releases

    # for each release we need to get its parent to also
    # load their cache data in order to generate a complete
    # oval for such release
    parent_releases = set()

    for release in releases:
        while(release_parent(release)):
            release = release_parent(release)
            parent_releases.add(release)

    releases = set(releases + list(parent_releases))
    if args.expand:
        out_releases = releases
    else:
        out_releases = set(out_releases) - parent_releases

    if args.type == 'usn':
        generate_oval_usn(args.output_dir, args.usn_number, releases,
                          args.cves, args.usn_db_dir, args.no_progress,
                          args.oci_prefix, args.oci_output_dir)
    else:
        cache = {}
        for release in releases:
            cve_cache = {}
            cache.update({release: get_package_cache(args.pkg_cache_dir, release)})

        if args.type == 'pkg':
            generate_oval_package(out_releases, args.output_dir, args.cves, cache, cve_cache, args.oci, args.no_progress, args.packages, args.fixed_only, args.oci_output_dir, args.expand)
        elif args.type == 'cve':
            generate_oval_cve(out_releases, args.output_dir, args.cves, cache, cve_cache, args.oci, args.no_progress, args.packages, args.fixed_only, args.oci_output_dir, args.expand)
        elif args.type == 'json-pkg':
            usn_database = get_usn_database(args.usn_db_dir)
            if not usn_database:
                error("Error getting local USN database. Please, run '$UCT/scripts/fetch-db database.json.bz2' to retrieve the database and try again.")

            generate_json_pkg_oval(out_releases, args.output_dir, args.cves, cache, cve_cache, usn_database, args.no_progress, args.packages, args.fixed_only, args.expand)


def warn(message):
    """ print a warning message """
    sys.stdout.write('\rWARNING: {0}\n'.format(message))

def error(message):
    """ print a error message """
    sys.stderr.write('\rERROR: {0}\n'.format(message))
    sys.exit(1)

def debug(message):
    """ print a debuging message """
    if debug_level > 0:
        sys.stdout.write('\rDEBUG: {0}\n'.format(message))

def prepend_usn_to_id(usn_database, usn_id):
    if re.search(r'^[0-9]+-[0-9]$', usn_id):
        usn_database[usn_id]['id'] = 'USN-' + usn_id

# loads cve package cache <release>-pkg-cache.json based given path to it.
# To get the cache proceed as: $UCT/scripts/fetch-db <release>-pkg-cache.json pkg-cache
def get_package_cache(pkg_cache_dir, release):
    data = {}
    for filename in glob.glob(os.path.join(pkg_cache_dir, release.replace('/', '_') + '-pkg-cache.json')):
        debug(f"Opening and reading cache file {filename}")
        with open(filename, 'r') as f:
            data = json.load(f)

    return data

# loads usn database.json based given a path to it.
# To get the database proceed as: $UCT/scripts/fetch-db database.json.bz2
def get_usn_database(usn_db_dir):
    data = {}
    for filename in glob.glob(os.path.join(usn_db_dir, 'database*.json')):
        with open(filename, 'r') as f:
            data.update(json.load(f))

    return data

# Usage:
# for a given release only:
#   ./generate-oval --type usn --usn-db-dir ~/usndb --oval-releases=focal --output-dir /tmp/oval_usn
# for all the releases:
#   ./generate-oval --type usn --usn-db-dir ~/usndb --output-dir /tmp/oval_usn
# for a specific release and USN-number
#   ./generate-oval --type usn --usn-db-dir ~/usndb --oval-releases=focal --usn-number=1234
# WARNING:
#  be sure the release you are passing is in the usn-number passed
#  otherwise it will generate an oval file without the usn info.
def generate_oval_usn(outdir, usn, usn_releases, cves, usn_db_dir, no_progress, ociprefix, ocioutdir):
    # Get the usn database.json data
    usn_database = get_usn_database(usn_db_dir)
    if not usn_database:
        error("Error getting local USN database. Please, run '$UCT/scripts/fetch-db database.json.bz2' to retrieve the database and try again.")

    if usn:
        if usn not in usn_database:
            error("Please enter a valid USN number or update your database.json and try again")

    # Create OvalGeneratorUSN objects
    ovals = []
    valid_releases = []

    # Check or generate valid releases
    valid_releases = list(filter(lambda release: product_series(release)[0] == PRODUCT_UBUNTU, usn_releases))

    if not no_progress:
        print('[*] Generating OVAL USN for packages in releases', ', '.join(valid_releases))

    for release in valid_releases:
        ovals.append(oval_lib.OvalGeneratorUSN(release, release_name(release), outdir, cves))
        # Also produce oval generator object for OCI
        if ocioutdir:
            ovals.append(oval_lib.OvalGeneratorUSN(release, release_name(release), ocioutdir,
                                                cves, ociprefix, 'oci'))
    # Generate OVAL USN data
    if usn:
        prepend_usn_to_id(usn_database, usn)
        for oval in ovals:
            oval.generate_usn_oval(usn_database[usn], usn_database[usn]['id'], cves)
    else:
        for usn in sorted(usn_database.keys()):
            prepend_usn_to_id(usn_database, usn)
            for oval in ovals:
                oval.generate_usn_oval(usn_database[usn], usn_database[usn]['id'], cves)

    for oval in ovals:
        oval.write_oval_elements()

    if not no_progress:
        print(f'[*] Done generating OVAL USN for packages in releases {", ".join(valid_releases)}')

    return True

def generate_oval_package(releases, outdir, cves, pkg_cache, cve_cache, oci, no_progress, packages, fixed_only, ocioutdir, expand):
    if not no_progress:
        print('[*] Initiating OVAL Generation for PKG')

    ov = oval_lib.OvalGeneratorPkg(
        releases,
        cves,
        packages,
        not no_progress,
        pkg_cache=pkg_cache,
        fixed_only=fixed_only,
        cve_cache=cve_cache,
        oval_format='dpkg',
        outdir=outdir,
        expand=expand
    )

    if not no_progress:
        print(f'[*] Generating OVAL PKG for packages in releases {", ".join(releases)}')

    ov.generate_oval()

    if oci:
        ov.oval_format = 'oci'
        ov.output_dir = ocioutdir
        ov.generate_oval()

    if not no_progress:
        print(f'[X] Done generating OVAL PKG for packages in releases {", ".join(releases)}')

def generate_oval_cve(releases, outdir, cves, pkg_cache, cve_cache, oci, no_progress, packages, fixed_only, ocioutdir, expand):
    if not no_progress:
        print('[*] Initiating OVAL Generation for CVE')

    ov = oval_lib.OvalGeneratorCVE(
        releases,
        cves,
        packages,
        not no_progress,
        pkg_cache=pkg_cache,
        fixed_only=fixed_only,
        cve_cache=cve_cache,
        oval_format='dpkg',
        outdir=outdir,
        expand=expand
    )

    if not no_progress:
        print(f'[*] Generating OVAL CVE for packages in releases {", ".join(releases)}')

    ov.generate_oval()

    if oci:
        ov.oval_format = 'oci'
        ov.output_dir = ocioutdir
        ov.generate_oval()

    if not no_progress:
        print(f'[X] Done generating OVAL CVE for packages in releases {", ".join(releases)}')


def generate_json_pkg_oval(releases, output_dir, cves, cache, cve_cache, usn_database, no_progress, packages, fixed_only, expand):
    if not no_progress:
        print(f'[*] Generating JSON PKG for packages in releases {", ".join(releases)}')

    gen = oval_lib.JSONPkgGenerator(releases, cves, packages, not no_progress, cache, usn_database, fixed_only, cve_cache, output_dir, expand)

    gen.generate_json()

    if not no_progress:
        print(f'[X] Done generating JSON PKG for packages in releases {", ".join(releases)}')

if __name__ == '__main__':
    main()

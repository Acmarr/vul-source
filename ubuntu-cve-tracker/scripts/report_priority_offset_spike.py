#!/usr/bin/python3

import argparse
import subprocess
import sys
from datetime import datetime
import cve_lib
import os

# this is needed to consume google docs apis wrapper
USM = os.environ.get(
    "USM", os.path.expandvars("$HOME/git-pulls/ubuntu-security-metrics")
)
sys.path.append(f"{USM}")

from metrics.data_sources.google_document import (
    connect_to_spreadsheet,
    write_to_spreadsheet,
    append_row_data
)

PRIORITY_OFFSET = {
    'critical': 'high' ,
    'high': 'medium',
    'medium': 'low',
    'low': 'negligible'
}

PRIORITY_BUMP= {
    'high': 'critical',
    'medium': 'high',
    'low': 'medium',
    'negligible': 'low'
}

HIGHER_LEVELS = {
    'critical' : ['high', 'medium','low'],
    'high' : ['medium','low'],
    'medium' : ['low'],
    'low' : [],
}

def get_cvss_base_severity(cvss_information):
    base_severity = None
    for cvss in cvss_information:
            if cvss['source'] == "nvd":
                cvss_base_severity = cvss['baseSeverity']
                if cvss_base_severity != "NONE":
                     base_severity = cvss_base_severity
    return base_severity


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--published-since",
        help="Report CVEs published only since the date specified. Format: YYYY-MM-DD",
    )
    args = parser.parse_args()

    since_date = None
    if args.published_since:
        try:
            since_date = datetime.strptime(args.published_since, "%Y-%m-%d")
        except ValueError as e:
            print(f"ERROR: invalid since date argument value: {args.published_since}. {e}")
            sys.exit(1)

    try:
        print("\n==== Loading CVEs from UCT ====\n")
        all_cves, embargoed_cves, retired_cves, ignored_cves = cve_lib.get_all_cve_list()
        (
            _,
            _,
            _,
            _,
            full_cves_information,
        ) = cve_lib.load_table(all_cves, embargoed_cves, None, retired_cves, ignored_cves, since_date)
    except ValueError as e:
        # cve_lib.load_cve() can raises value error on CVE issues
        print(f"ERROR: unable to load CVEs: {e}")
        sys.exit(1)

    cves_with_mismatches = dict()
    cves_with_cvss_severity = 0
    #cves_with_mismatches = dict()
    cves_with_mismatches = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
    total_differences = 0
    cves_with_same = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
    total_same = 0
    cves_diff = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
    total_diff = 0

    creds_file = "/home/emitorino/register-automation-1338127a145f.json"
    sheet = connect_to_spreadsheet(creds_file)
    rows_data = []
    row = 2
    missing_cvss = 0
    equals = 0
    higher = 0
    lower = 0
    for cve in full_cves_information:
        original_ubuntu_priority = full_cves_information[cve]['Priority'][0]
        ubuntu_priority = PRIORITY_BUMP[original_ubuntu_priority]
        print (f"Bumping {original_ubuntu_priority} to {ubuntu_priority}")
        cvss_base_severity = get_cvss_base_severity(full_cves_information[cve]['CVSS'])
        needs_explanation = "NO"
        cve_data = []
        if cvss_base_severity:
            cves_with_cvss_severity +=1
            cvss_base_severity = cvss_base_severity.lower()
            cve_data = [cve, cvss_base_severity, original_ubuntu_priority, ubuntu_priority]
            # if cvss_base_severity == ubuntu_priority:
            #         cves_with_same[cvss_base_severity] +=1
            #         total_same +=1
            ubuntu_priority_reason = full_cves_information[cve]['Priority'][1]
            # if cvss_base_severity.lower() != ubuntu_priority and not ubuntu_priority_reason:
            #     cves_with_mismatches[cve] = full_cves_information[cve]
            if cvss_base_severity in PRIORITY_OFFSET:
                if ubuntu_priority != cvss_base_severity:
                    cves_with_mismatches[cvss_base_severity] +=1
                    total_differences +=1
                    if ubuntu_priority in HIGHER_LEVELS[cvss_base_severity]:
                        needs_explanation = "YES"
                        lower += 1
                    else:
                        needs_explanation = "Maybe?"
                        higher += 1
                else:
                    equals += 1
                #     if cvss_base_severity != ubuntu_priority:
                #         cves_diff[cvss_base_severity] +=1
                #         total_diff +=1
                # if cvss_base_severity == ubuntu_priority:
                #     cves_with_same[cvss_base_severity] +=1
                #     total_same +=1
            else:
                print(f"ERROR: {ubuntu_priority} not in {PRIORITY_OFFSET.keys()}")
                sys.exit(1)
            cve_data.append(needs_explanation)
        else:
            missing_cvss+=1
            cve_data = [cve, "None", original_ubuntu_priority, ubuntu_priority, needs_explanation]
        row = append_row_data(
                                row,
                                rows_data,
                                "{}!A{}:E{}".format("Sheet2", row, row),
                                cve_data
                            )
    
    print(total_differences)
    print(cves_with_mismatches)
    print("ALL CVES")
    print(len(full_cves_information))
    print("Missing CVSS")
    print(missing_cvss)
    print("NOW LOWER")
    print(lower)
    print("NOW HIGER")
    print(higher)
    print("NOW EQUALS")
    print(equals)
    write_to_spreadsheet(sheet, "1S1L4H5Kfkpgt_j0O2Gk6i8R2e78CFrpaCPyLbRz_No0", rows_data, rows_range=None, batch_update=True)
    # row = 1
    # range = 0
    # delta = 60
    # for c in data[range, range + delta]:
    #     values = [c]
    #     range = "{}!A{}:E{}".format("Sheet1", row, row)
    #     write_to_spreadsheet(
    #             sheet, "", values, rows_range=range, batch_update=False
    #     )
    #     row +=1
    # print(total_same)
    # print(cves_with_same)
    # print(total_diff)
    # print(cves_diff)
    # if cves_with_mismatches:
    #     total_cves_to_process = len(cves_with_mismatches)
    #     print(f"\n==== Listing {total_cves_to_process} CVEs (out of {len(full_cves_information)}) with Ubuntu Priority different than CVSS base severity ====")
    #     for index, cve in enumerate(cves_with_mismatches):
    #         print(f"\n=========== {index + 1}/{total_cves_to_process}: {cve} ===========")
    #         print(cves_with_mismatches[cve]['Description'])
    #         print(f"Ubuntu Priority: {cves_with_mismatches[cve]['Priority'][0]}")
    #         print(f"CVSS Severity: {get_cvss_base_severity(cves_with_mismatches[cve]['CVSS'])}")
    #         print(f"Affected packages: {', '.join(cves_with_mismatches[cve]['pkgs'].keys())}")
    #         print(f"Tags: {', '.join(cves_with_mismatches[cve]['tags'])}")
    #         print(f"References: {cves_with_mismatches[cve]['References']}")
    #         print(f"Bugs: {cves_with_mismatches[cve]['Bugs']}")

    # if cves_with_mismatches:
    #     total_cves_to_process = len(cves_with_mismatches)
    #     print(f"\n==== Listing {total_cves_to_process} CVEs (out of {cves_with_cvss_severity}) with Ubuntu Priority different than CVSS base severity ====")
    #     for index, cve in enumerate(cves_with_mismatches):
    #         print(f"\n=========== {index + 1}/{total_cves_to_process}: {cve} ===========")
    #         print(cves_with_mismatches[cve]['Description'])
    #         print(f"Ubuntu Priority: {cves_with_mismatches[cve]['Priority'][0]}")
    #         print(f"CVSS Severity: {get_cvss_base_severity(cves_with_mismatches[cve]['CVSS'])}")
    #         print(f"Affected packages: {', '.join(cves_with_mismatches[cve]['pkgs'].keys())}")
    #         print(f"Tags: {', '.join(cves_with_mismatches[cve]['tags'])}")
    #         print(f"References: {cves_with_mismatches[cve]['References']}")
    #         print(f"Bugs: {cves_with_mismatches[cve]['Bugs']}")
    #         print("Add priority reason? [Y/N/Q(quit)]")
    #         confirm = input()
    #         if confirm.lower() in ('Y', 'y', 'yes', 'YES'):
    #             reason = input("Please add Ubuntu priority reason: ")
    #             # TODO: check for script dir location
    #             cmd = ['./scripts/active_edit', '-c', cve, '-R', reason]
    #             try:
    #                 subprocess.run(cmd, check=True)
    #             except subprocess.CalledProcessError as e:
    #                 print(f"ERROR while updating CVE file. {e}")

    #         elif confirm.lower() in ('Q', 'q', 'quit', 'Quit', 'QUIT'):
    #             print("Quiting...")
    #             sys.exit(0)
    #         elif confirm.lower() in ('N', 'n', 'no', 'NO'):
    #             print(f"Skipping {cve}")
